name: Automatic Rebase
on:
  issue_comment:
    types: [created]
jobs:
  rebase:
    name: Rebase
    runs-on: ubuntu-latest
    if: >
      github.event.issue.pull_request != '' &&
      contains(github.event.comment.body, '/rebase')
    steps:
      - name: Checkout the latest code
        uses: actions/checkout@v3
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          fetch-depth: 0

      - name: Check for Changes
        id: changes
        run: |
          git fetch origin
          base=$(jq -r '.issue.pull_request.base.ref' "$GITHUB_EVENT_PATH")
          head=$(jq -r '.issue.pull_request.head.ref' "$GITHUB_EVENT_PATH")
          git diff --quiet origin/$base origin/$head && echo "::set-output name=changed::false" || echo "::set-output name=changed::true"

      - name: Automatic Rebase
        if: ${{ steps.changes.outputs.changed == 'true' }}
        id: rebase
        uses: cirrus-actions/rebase@1.8
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Check Rebase Status
        if: ${{ steps.rebase.outputs.status == 'failure' }}
        run: exit 1

      - name: Post Success Message
        if: ${{ steps.rebase.outputs.status == 'success' }}
        run: |
          echo "Rebase successful!"
          echo "::set-output name=message::Rebase successful!"

      - name: Post Failure Message
        if: ${{ steps.rebase.outputs.status == 'failure' }}
        run: |
          echo "Rebase failed. Please resolve conflicts manually."
          echo "::set-output name=message::Rebase failed. Please resolve conflicts manually."

      - name: Comment on Pull Request
        if: ${{ steps.rebase.outputs.status == 'success' || steps.rebase.outputs.status == 'failure' }}
        run: |
          curl -X POST \
            -H "Authorization: token ${{ secrets.GITHUB_TOKEN }}" \
            -H "Content-Type: application/json" \
            -d '{"body": "'"$MESSAGE"'"}' \
            "https://api.github.com/repos/${GITHUB_REPOSITORY}/issues/${{ github.event.issue.number }}/comments"
        env:
          MESSAGE: ${{ steps.rebase.outputs.message }}
